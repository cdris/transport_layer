#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

# converts the list of tuples of received messages into a string
def to_ranges(keys):
  keys_only = keys[:]
  ranges = []
  if keys_only:
    maxi = keys_only.pop()
    mini = maxi
    while keys_only:
      popped = keys_only.pop()
      if mini - popped == 1:
        mini = popped
      else:
        ranges.append((mini, maxi))
        maxi, mini = popped, popped
    ranges.append((mini, maxi))
    ranges.reverse()
    return " ".join([str(x[0]) if x[0] == x[1] else str(x[0]) + ":" + str(x[1]) for x in ranges])
  else:
    return ""
  
# inserts the tuple into the list of tuples in sorted order  
def insert(tuple, tuples):
  for i in range(len(tuples)):
    if tuple[0] < tuples[i][0]:
      tuples.insert(i, tuple)
      return
  tuples.append(tuple)

# prints all messages that can be printed
def write_messages(next_id, messages_in_memory):
  if next_id in messages_in_memory
    sys.stdout.write(messages_in_memory[next_id])
    del messages_in_memory[next_id]
    writes_messages(next_id + 1, messages_in_memory)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

ids_seen = []
eof_seen = False
messages_in_memory = {}
next_id_to_print = 0

# Now listen for packets
while True:
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      decoded = json.loads(data)

      # If the EOF flag is set, exit
      if (decoded['eof']):
        log("[completed]")
        sys.exit(0)

      # If there is data, we accept it and print it out
      if (decoded['data']):
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
        sys.stdout.write(decoded['data'])

      # Send back an ack to the sender
      msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
      log("ABOUT TO SEND " + msg)
      if sock.sendto(msg, addr) < len(msg):
        log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
