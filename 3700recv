#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

# converts the list of tuples of received messages into a string
def to_ranges(keys):
  keys_only = keys[:]
  ranges = []
  if keys_only:
    maxi = keys_only.pop()
    mini = maxi
    while keys_only:
      popped = keys_only.pop()
      if mini - popped == 1:
        mini = popped
      else:
        ranges.append((mini, maxi))
        maxi, mini = popped, popped
    ranges.append((mini, maxi))
    ranges.reverse()
    return " ".join([str(x[0]) if x[0] == x[1] else str(x[0]) + ":" + str(x[1]) for x in ranges])
  else:
    return ""
  
# inserts the key into the list of keys in ascending order  
def insert(key, keys):
  for i in range(len(keys)):
    if key < keys[i]:
      keys.insert(i, key)
      return i
  keys.append(key)
  return len(keys)

# prints all messages that can be printed and returns the next_id to print
def write_messages(next_id, messages_in_memory):
  while next_id in messages_in_memory:
    sys.stdout.write(messages_in_memory[next_id])
    sys.stdout.flush()
    del messages_in_memory[next_id]
    next_id += 1
  return next_id

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 1

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

ids_seen = []           # sorted list of ids seen
messages_in_memory = {} # dict from ids to their message fields, dynamically updated
next_id_to_print = 0    # the next id to print to keep in order value
eof_seen = False        # whether or not we've seen the last message
timeouts_in_row = 0     # the number of udp receive timeouts we've seen in a row

# sends an acknowledgement
def ack():
  msg = json.dumps(to_ranges(ids_seen))
  log("ABOUT TO SEND " + msg)
  if sock.sendto(msg, addr) < len(msg):
    log("[error] unable to fully send packet")

# Now listen for packets
while True:
  try:
    result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
    timeouts_in_row = 0
    (data, addr) = result

    try:
      decoded = json.loads(data)
      # this is an ack request, send out an acknowledgment
      if decoded['ack']:      
        ack()
      else: 
        id = decoded['id']
        data = decoded['data']
        packet_length = len(data)
        log_help = lambda x: log("[recv data] " + str(id * DATA_SIZE) + \
                             " (" + str(packet_length) + ") " + x)  

        # If we've already seen this packet, ignore it
        if id in ids_seen:
          log_help("IGNORED")
        else: 
        # Add the packet to our collections, then check if it's in order or not
          inserted_at = insert(id, ids_seen)
          messages_in_memory[id] = data
          if inserted_at == len(ids_seen):
            log_help("ACCEPTED (in order)")
          else:
            log_help("ACCEPTED (out-of order)")
  
        # Print the messages we can
        next_id_to_print = write_messages(next_id_to_print, messages_in_memory)
  
        # If the EOF flag is set, mark that we've seen the last packet
        if decoded['eof']:
          eof_seen = True
        
        # If we've seen the EOF flag and we have every packet up until it, exit
        if eof_seen and len(ids_seen) == ids_seen[-1] + 1:
          ack()
          log("[completed]")
          exit(0)
    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet], IGNORED")
  except socket.timeout:
    log("[error] timeout")
    timeouts_in_row += 1
    if timeouts_in_row == 555:
      log("[where are my messages?] EXITING")
      exit(-1)
