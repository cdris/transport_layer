#!/usr/bin/python -u

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500    # bytes to read in
DATA_SIZE = 1400   # size of data messages
TIMEOUT = 1        # timeout for hearing an ack
ID = 0             # id of the next packet to be sent
WINDOW = 6         # size of the sending window
IN_FLIGHT = {}     # packets in flight (id : data)
SLOW_START = True  # whether we are in slow start state
EOF = False        # whether the EOF has been reached
RTT = 1            # round trip time estimation

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(':')]
UDP_PORT = int(IP_PORT[IP_PORT.find(':')+1:])
dest = (UDP_IP, UDP_PORT)

# set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

# sets the global rtt based on the given time (in milliseconds)
def estimate_rtt(new):
  global RTT
  alpha = 0.875
  RTT = (alpha * RTT) + ((1 - alpha) * new)

# converts a string representation of received IDs into a set
def from_ranges(s):
  result = set()
  if s != '':
    ranges = s.split(' ')
    for r in ranges:
      bounds = r.split(':')
      if len(bounds) > 1:
        for x in range(int(bounds[0]), int(bounds[1]) + 1):
          result.add(x)
      else:
        result.add(int(bounds[0]))
  return result

# creates a dictionary with only the elements of the given dictionary
# whose keys are not in the given set
def evict(d, s):
  result = {}
  for key, value in d.items():
    if key not in s:
       result[key] = value
  return result

# adds new data packets to the given dictionary to fill the sending window
# and sends the ack request to the receiver
def add_to(d):
  global ID
  if EOF:
    return d
  now = time.time()
  while len(d) < WINDOW:
    if EOF:
      break
    else:
      d[ID] = (send_next_packet(), now, False)
      ID += 1
  send_ack_request()
  return d

# logs the given string to STDERR with microsecond-accurate timestamp
def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# sends the ack request message
def send_ack_request():
  msg = json.dumps({'ack': True})
  if sock.sendto(msg, dest) < len(msg):
    log('[error] unable to send full ack request')

# sends the next packet and increments the ID
def send_next_packet():
  global ID
  global EOF
  data = sys.stdin.read(DATA_SIZE)
  if len(data) < DATA_SIZE:
    EOF = True
  if len(data) > 0:
    msg = json.dumps({"id": ID, "data": data, "ack": False, "eof": EOF})
    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(ID * DATA_SIZE) + " (" + str(len(data)) + ")")
    return data
  else:
    EOF = True
    msg = json.dumps({'id': ID, 'data': '', 'ack': False, 'eof': EOF})
    sock.sendto(msg, dest)
    return None

# resends the packet with the given id
def resend(id):
  IN_FLIGHT[id] = (IN_FLIGHT[id][0], time.time(), True)
  msg = json.dumps({'id': id, 'data': IN_FLIGHT[id][0], 'ack': False, 'eof': id == ID - 1 and EOF})
  if sock.sendto(msg, dest) < len(msg):
    log('[error] unable to fully send packet')
  else:
    log('[resend data] ' + str(id * DATA_SIZE) + ' (' + str(len(IN_FLIGHT[id][0])) + ')')

# updates the sending window based on the state
def update_window(new):
  global WINDOW
  if SLOW_START:
     WINDOW += new
  elif new == WINDOW:
    WINDOW += 1

# marks all inflight packets for resend
def resend_all():
  global IN_FLIGHT
  for x in IN_FLIGHT.keys():
    resend(x)

# sends a done message
def send_done():
  msg = json.dumps({'id': 'done', 'data': '', 'ack': False, 'eof': False})
  sock.sendto(msg, dest)

# sends a close message
def send_close():
  msg = json.dumps({'id': 'close', 'data': '', 'ack': False, 'eof': False})
  sock.sendto(msg, dest)

# sends the first packet
add_to(IN_FLIGHT)

# Now read in data, send packets
while True:
  try:
    result = sock.recvfrom(MSG_SIZE)

    (data, addr) = result
    try:
      decoded = json.loads(data)
      # mark in flight packets as ACKed
      acks = from_ranges(decoded)
      newly_acked = 0
      now = time.time()
      for x in IN_FLIGHT.keys():
        if x in acks:
          log("[recv ack] " + str(x))
          newly_acked += 1
          if not IN_FLIGHT[x][2]:
            estimate_rtt(now - IN_FLIGHT[x][1])
        elif (now - IN_FLIGHT[x][1] >= RTT and not acks) or max(acks) > x:
          resend(x)
      
      sock.settimeout(RTT * 1.5)

      if acks == set(range(ID)) and EOF:
        break

      update_window(newly_acked)
  
      # evicts acked packets and sends new packets to fill flight window
      IN_FLIGHT = add_to(evict(IN_FLIGHT, acks))

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet] " + str(e))
  except socket.timeout:
    log("[error] timeout")
    estimate_rtt(1.5 * RTT)
    sock.settimeout(RTT * 1.5)
    SLOW_START = False
    resend_all()
    send_ack_request()
    WINDOW = max(4, (2 * WINDOW) // 3)

send_done()

SEND_FIN = True
timeout_count = 0
# final shutdown loop
while True:
  try:
    result = sock.recvfrom(MSG_SIZE)
    
    (data, addr) = result
    decoded = json.loads(data)
    if decoded['id'] == 'closing':
      SEND_FIN = False
      send_close()
    elif decoded['id'] == 'closed':
      sock.close()
      sys.exit(0)
    else:
      send_done()
  except (socket.timeout, KeyError, TypeError):
    if timeout_count == 4:
      log('[completed]')
      sock.close()
      sys.exit(0)

    if SEND_FIN:
      send_done()
    else:
      send_close()
      timeout_count += 1
